name: Cloudflare Preview

on:
  pull_request:
    branches:
      - main

jobs:
  preview:
    runs-on: ubuntu-latest

    # Set environment variables
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_WORKER_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      NPM_CONFIG_USERCONFIG: .npmrc.prod
      NODE_ENV: production
      ENVIRONMENT: development

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4

      # Set up node.js for pnpm
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      # Install pnpm dependencies
      - name: Install pnpm dependencies
        run: pnpm install --frozen-lockfile --optional

      # Build site
      - name: Build site
        run: pnpm build

      # Upload version
      - name: Upload preview
        id: upload
        run: |
          RESULT=$(pnpm exec wrangler versions upload --preview-alias ${{ github.event.pull_request.number }}-${{ github.head_ref }} --config wrangler.json)
          echo "$RESULT"
          PREVIEW_URL=$(echo "$RESULT" | grep -Eo 'https?://[^\ ]+workers.dev/[^\ ]*')
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      # Preview URL
      - name: Preview URL
        run: echo "Preview URL is ${{ steps.upload.outputs.preview_url }}"

      # Comment preview
      - name: Comment preview URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `ðŸš€ Cloudflare Preview URL: ${{ steps.upload.outputs.preview_url }}<!-- cloudflare-preview -->`;

            // List all comments
            const { data: comments } = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Look for existing comment with identifier
            const existingComment = comments.find(c => c.body.includes('<!-- cloudflare-preview -->'));

            if (existingComment) {
              // Update the existing comment
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create a new comment
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
